<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--
		Inject the DomainGroupMapper into the DomainGroupPeopleIdClassBridge
		so it can go to the database to get the follower and coordinator
		Person IDs
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.DomainGroupPeopleIdClassBridge" />
		<property name="targetMethod" value="setDomainGroupMapper" />
		<property name="arguments">
			<list>
				<ref bean="jpaGroupMapper" />
			</list>
		</property>
	</bean>
	
	
	<!-- Give the OrgIdHierarchyFieldBridge the org cache -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.OrgIdHierarchyFieldBridge" />
		<property name="targetMethod" value="setOrganizationHierarchyCache" />
		<property name="arguments">
			<list>
				<ref bean="organizationHierarchyCache" />
			</list>
		</property>
	</bean>
	
	
	<!--
		Inject the ActivityRecipientClassBridge with the person cache
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityRecipientClassBridge" />
		<property name="targetMethod" value="setGetPersonIdByAccountIdMapper" />
		<property name="arguments">
			<list>
				<ref bean="getPersonIdByAccountIdMapper" />
			</list>
		</property>
	</bean>
	
	<!--
		Inject the ActivityRecipientClassBridge with the domain group cache
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityRecipientClassBridge" />
		<property name="targetMethod" value="setGetDomainGroupsByShortNames" />
		<property name="arguments">
			<list>
				<ref bean="bulkDomainGroupsByShortNameMapper" />
			</list>
		</property>
	</bean>

	<!--
		Inject the ActivityAuthorClassBridge with the person account ids -> id mapper.
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityAuthorClassBridge" />
		<property name="targetMethod" value="setGetPersonIdByAccountIdMapper" />
		<property name="arguments">
			<list>
				<ref bean="getPersonIdByAccountIdMapper" />
			</list>
		</property>
	</bean>
	
	<!--
		Inject the ActivityAuthorClassBridge with the domain group cache
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityAuthorClassBridge" />
		<property name="targetMethod" value="setGetDomainGroupsByShortNames" />
		<property name="arguments">
			<list>
				<ref bean="bulkDomainGroupsByShortNameMapper" />
			</list>
		</property>
	</bean>
	
	<!--
		Inject the ActivityLastCommentIdClassBridge with the comments cache
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityLastCommentIdClassBridge" />
		<property name="targetMethod" value="setCommentIdsByActivityIdDAO" />
		<property name="arguments">
			<list>
				<ref bean="getOrderedCommentIdsByActivityIdMapper" />
			</list>
		</property>
	</bean>
	
	<!--
		Inject the ActivityContentClassBridge with the comments DAOs.
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityContentClassBridge" />
		<property name="targetMethod" value="setCommentDAOs" />
		<property name="arguments">
			<list>
				<ref bean="getOrderedCommentIdsByActivityIdMapper" />
				<ref bean="getCommentsById" />
			</list>
		</property>
	</bean>

	<!--
		Inject the ActivityInterestingClassBridge with the interestingness strategy
	-->
	<bean id="interstingnessStrategy" class="org.eurekastreams.server.search.bridge.strategies.WeightedInterestingnessStrategy">
		<constructor-arg ref="getOrderedCommentIdsByActivityIdMapper" />
		<constructor-arg ref="getCommentorIdsByActivityId" />
		<constructor-arg ref="getPeopleWhoLikedActivity" />
		<constructor-arg value="2" />
		<constructor-arg value="3" />
		<constructor-arg value="1" />
		<constructor-arg value="15" />
	</bean>
	
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityInterestingClassBridge" />
		<property name="targetMethod" value="setInterstingnessStrategy" />
		<property name="arguments">
			<list>
				<ref bean="interstingnessStrategy" />
			</list>
		</property>
	</bean>
	
	<!--
		Inject the ActivityLikesClassBridge with the interestingness strategy
	-->
	<bean id="likesStrategy" class="org.eurekastreams.server.search.bridge.strategies.WeightedInterestingnessStrategy">
		<constructor-arg ref="getOrderedCommentIdsByActivityIdMapper" />
		<constructor-arg ref="getCommentorIdsByActivityId" />
		<constructor-arg ref="getPeopleWhoLikedActivity" />
		<constructor-arg value="0" />
		<constructor-arg value="0" />
		<constructor-arg value="1" />
		<constructor-arg value="0" />
	</bean>
	
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass"
			value="org.eurekastreams.server.search.bridge.ActivityLikesClassBridge" />
		<property name="targetMethod" value="setInterstingnessStrategy" />
		<property name="arguments">
			<list>
				<ref bean="likesStrategy" />
			</list>
		</property>
	</bean>
	
</beans>